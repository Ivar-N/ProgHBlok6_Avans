----------------------------------------------------------------------------------
-- Company: Avans
-- Engineer: Ivar Nouwens, Wouter Hendrikx
-- 
-- Create Date: 15.11.2024 13:53:33
-- Design Name: -
-- Module Name: FullAdder_TB - Behavioral
-- Project Name: FullAdder_TB
-- Target Devices: -
-- Tool Versions: 2024.1
-- Description: -
-- 
-- Dependencies: -
-- 
-- Revision: -
-- Revision 0.01 - File Created
-- Additional Comments: -
-- 
-----------------------------------------------------------------------------------


LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
LIBRARY UNISIM;
USE UNISIM.Vcomponents.ALL;

ENTITY FullAdder_TB IS
END FullAdder_TB;

-- Describe the archtitecture
ARCHITECTURE behavioral OF FullAdder_TB IS 

-- Add the component FullAdder
  COMPONENT FullAdder
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           Cin : in STD_LOGIC;
           S : out STD_LOGIC;
           Cout : out STD_LOGIC);
   END COMPONENT;
   
-- Define singals
 SIGNAL A, B, Cin, S, Cout  :   STD_LOGIC;
 SIGNAL OK    : boolean := true; -- Signal for test result tracking
 
 BEGIN

-- Instance of the Full Adder component
   UUT: FullAdder PORT MAP(
        A => A, 
        B => B, 
        Cin => Cin,
        S => S, 
        Cout => Cout
   );
   
-- Testcase process
   tb : PROCESS
        variable S_t    : STD_LOGIC;
        variable Cout_t : STD_LOGIC;

   BEGIN
   for Index in 0 to 7 loop
		case Index is
                when 0 => 
                    A <= '0';
                    B <= '0'; 
                    Cin <= '0';
                    S_t := '0';
                    Cout_t := '0';
                when 1 => 
                    A <= '1';
                    B <= '0'; 
                    Cin <= '0';
                    S_t := '1';
                    Cout_t := '0';
                when 2 => 
                    A <= '0';
                    B <= '1'; 
                    Cin <= '0';
                    S_t := '1';
                    Cout_t := '0';
                when 3 => 
                    A <= '1';
                    B <= '1'; 
                    Cin <= '0';
                    S_t := '0';
                    Cout_t := '1';
                when 4 => 
                    A <= '0';
                    B <= '0'; 
                    Cin <= '1';
                    S_t := '1';
                    Cout_t := '0';
                when 5 => 
                    A <= '1';
                    B <= '0'; 
                    Cin <= '1';
                    S_t := '0';
                    Cout_t := '1';
                when 6 => 
                    A <= '0';
                    B <= '1'; 
                    Cin <= '1';
                    S_t := '0';
                    Cout_t := '1';
                when 7 => 
                    A <= '1';
                    B <= '1'; 
                    Cin <= '1';
                    S_t := '1';
                    Cout_t := '1';
        end case;
        
-- Wait for signal propagation
        wait for 5 ns;


-- Check the results
        IF S /= S_t THEN
            OK <= false; -- Test fails if S does not match
        END IF;
        
        IF Cout /= Cout_t THEN
            OK <= false; -- Test fails if Cout does not match
        END IF;
        
-- End of test loop
    end loop;
    
-- Stop the simulation
    WAIT; 

   END PROCESS;

END behavioral;
